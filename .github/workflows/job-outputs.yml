# This is a basic workflow that is manually triggered

name: job outputs

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:

  workflow_dispatch:
    # Inputs the workflow accepts.

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  job1:
    runs-on: ubuntu-latest
    
    # Map a step output to a job output
    #
    #   These outputs should be used by All Downstream jobs in place of env var with same name in this 
    #   primary job. i.e. Use ${{needs.job1.outputs.out-ver_from_branch}} in place of ${{ env.ver_from_branch }}
    #
    #   prefix format: out-<output name>
    #     Note: prefix needed because you can't have "outputs: <output name>:" and
    #           "::set-output name=<output name>" be the same.
    outputs:
      out-ver_from_branch: ${{ steps.step1.outputs.ver_from_branch }}
      output2: ${{ steps.step2.outputs.test }}
      
    steps:
      - name: step1
        id: step1
        run: |
          ver='1.2.3'
          echo "ver: $ver"
          
          # set as env var and job output
          echo "ver_from_branch=$ver" >> $GITHUB_ENV
          echo "::set-output name=ver_from_branch::$ver"
        
      - name: step2
        id: step2
        run: |
          echo "env.ver_from_branch: " ${{ env.ver_from_branch }}
          echo "::set-output name=test::world"
      
      - name: print env
        run: env | sort        
        
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - name: Look at job1 outputs
        # job1 outputs should be used in place of env var with same name in job1 by ALL
        # Downstream jobs.
        run: |
          # Use ${{needs.job1.outputs.out-ver_from_branch}} in place of ${{ env.ver_from_branch }}
          echo "out-ver_from_branch: " ${{needs.job1.outputs.out-ver_from_branch}} 
          echo "job1.outputs.output2: " ${{needs.job1.outputs.output2}}
      
      - name: print env
        run: env | sort        
